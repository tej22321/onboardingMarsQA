// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MarsQA.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Adding Skills to a user profile")]
    [NUnit.Framework.CategoryAttribute("SkillsFeature")]
    public partial class AddingSkillsToAUserProfileFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "SkillsFeature"};
        
#line 1 "Skills.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Adding Skills to a user profile", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
 #line hidden
#line 6
   testRunner.Given("user logs in to Project Mars", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
   testRunner.And("navigate to Skills under profile tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add new Skills to user profile")]
        [NUnit.Framework.CategoryAttribute("addSkills")]
        [NUnit.Framework.TestCaseAttribute("Java", "Beginner", null)]
        [NUnit.Framework.TestCaseAttribute("spacebar", "Intermediate", null)]
        [NUnit.Framework.TestCaseAttribute("12345", "Beginner", null)]
        [NUnit.Framework.TestCaseAttribute("@#$$%^", "Expert", null)]
        [NUnit.Framework.TestCaseAttribute("", "Expert", null)]
        [NUnit.Framework.TestCaseAttribute("C $%", "Intermediate", null)]
        public void AddNewSkillsToUserProfile(string skills, string level, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "addSkills"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Skills", skills);
            argumentsOfScenario.Add("Level", level);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add new Skills to user profile", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 12
  testRunner.When(string.Format("user add \'{0}\' and \'{1}\' records", skills, level), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
  testRunner.Then("Verify Skills record is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify duplicate Skills record is not allowed for \"Java Beginner\"")]
        [NUnit.Framework.CategoryAttribute("checkDuplicate")]
        public void VerifyDuplicateSkillsRecordIsNotAllowedForJavaBeginner()
        {
            string[] tagsOfScenario = new string[] {
                    "checkDuplicate"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify duplicate Skills record is not allowed for \"Java Beginner\"", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 29
    testRunner.When("user adds \"Java\" and \"Beginner\" records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.And("user adds \"Java\" and \"Beginner\" again to skills", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
    testRunner.Then("Verify duplicate Skills record is not allowed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify case sentive same Skill record is not allowed for \"Java Beginner\"")]
        [NUnit.Framework.CategoryAttribute("checkCaseSensitivity")]
        public void VerifyCaseSentiveSameSkillRecordIsNotAllowedForJavaBeginner()
        {
            string[] tagsOfScenario = new string[] {
                    "checkCaseSensitivity"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify case sentive same Skill record is not allowed for \"Java Beginner\"", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 36
    testRunner.When("user adds \"Java\" and \"Beginner\" records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.And("user adds \"java\" and \"Beginner\" again to skills", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
    testRunner.Then("Verify duplicate Skills record with case sensitivity is not allowed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Edit existing skill record")]
        [NUnit.Framework.CategoryAttribute("editSkillRecord")]
        public void EditExistingSkillRecord()
        {
            string[] tagsOfScenario = new string[] {
                    "editSkillRecord"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit existing skill record", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 43
    testRunner.When("user adds \"Java\" and \"Beginner\" records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
 testRunner.And("user make changes to the exisiting \"Java\" \"Beginner\" record and update text to \"J" +
                        "AVAA\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
    testRunner.Then("Verify updated skill record is saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove Skill record")]
        [NUnit.Framework.CategoryAttribute("removeSkillRecord")]
        public void RemoveSkillRecord()
        {
            string[] tagsOfScenario = new string[] {
                    "removeSkillRecord"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove Skill record", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 50
    testRunner.When("user adds \"Java\" and \"Beginner\" records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
 testRunner.And("user navigate to \"Java\" \"Beginner\" record and remove it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
    testRunner.Then("Verify  Skill record is removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Maximum limit of Skill Records")]
        [NUnit.Framework.CategoryAttribute("MaximumlimitofSkillRecords")]
        public void MaximumLimitOfSkillRecords()
        {
            string[] tagsOfScenario = new string[] {
                    "MaximumlimitofSkillRecords"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Maximum limit of Skill Records", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Skills",
                            "Level"});
                table2.AddRow(new string[] {
                            "Java",
                            "Beginner"});
                table2.AddRow(new string[] {
                            "python",
                            "Intermediate"});
                table2.AddRow(new string[] {
                            "12345",
                            "Beginner"});
                table2.AddRow(new string[] {
                            "@#$$%^",
                            "Expert"});
                table2.AddRow(new string[] {
                            "pythons",
                            "Expert"});
                table2.AddRow(new string[] {
                            "python u",
                            "Intermediate"});
                table2.AddRow(new string[] {
                            "Javaf",
                            "Beginner"});
                table2.AddRow(new string[] {
                            "pytheon",
                            "Intermediate"});
                table2.AddRow(new string[] {
                            "123f45",
                            "Beginner"});
                table2.AddRow(new string[] {
                            "@#$d$%^",
                            "Expert"});
                table2.AddRow(new string[] {
                            "pythgons",
                            "Expert"});
                table2.AddRow(new string[] {
                            "pythgon u",
                            "Intermediate"});
                table2.AddRow(new string[] {
                            "Javas",
                            "Beginner"});
                table2.AddRow(new string[] {
                            "pythdon",
                            "Intermediate"});
                table2.AddRow(new string[] {
                            "12345v",
                            "Beginner"});
                table2.AddRow(new string[] {
                            "@#$$%^v",
                            "Expert"});
                table2.AddRow(new string[] {
                            "pythons v",
                            "Expert"});
                table2.AddRow(new string[] {
                            "python u v",
                            "Intermediate"});
#line 57
     testRunner.When("user adds the following skills:", ((string)(null)), table2, "When ");
#line hidden
#line 78
 testRunner.Then("Verify \"18\" record are saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
